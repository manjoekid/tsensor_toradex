
# CONF_VERSION is increased each time build/conf/ changes incompatibly
CONF_VERSION = "2"

# Which files do we want to parse:
BBMASK = ""

# Disable build time patch resolution. This would lauch a devshell
# and wait for manual intervention. We disable it.
PATCHRESOLVE = "noop"

#
# Parallelism Options
#
# These two options control how much parallelism BitBake should use. The first
# option determines how many tasks bitbake should run in parallel:
# Default to setting automatically based on cpu count
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"
#
# The second option controls how many processes make should run in parallel when
# running compile tasks:
# Default to setting automatically based on cpu count
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"

# Uncomment the lines below for graphics to work on QEMU builds
# Obs.: make sure you have libsdl2 installed in your host machine
#PACKAGECONFIG:append:pn-qemu-system-native = " sdl"
#PACKAGECONFIG:append:pn-nativesdk-qemu = " sdl"
#ASSUME_PROVIDED += "libsdl2-native"

# The following variables are required to build a software that can
# be debugged with GDB. Just substitute <PKG> with the package name
# that is producing the software you want to debug.
#SECURITY_CFLAGS_pn-<PKG> = "-no-pie -fno-PIE"
#DEBUG_BUILD_pn-<PKG> = "1"

#
# Shared-state files from other locations
#
# Shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
#file://.* file:///some/local/dir/sstate/PATH"

# enable PR service on build machine itself
# its good for a case when this is the only builder
# generating the feeds
#PRSERV_HOST = "localhost:0"

#
# Scale Provisioning
#
# The goal of this feature is to add provisioning data to the generated Toradex
# Easy Installer image allowing a device to provision itself to the OTA platform
# (Torizon Cloud) and/or accept offline updates at runtime.
#
# For the regular usage, one would simply set variables:
#
# - TORIZON_SOTA_PROV_MODE: allowed values are:
#   a) "": for no provisioning (default);
#   b) "offline": for offline provisioning in which case the device would be able
#      to accept offline updates (load updates from Lockboxes);
#   c) "online": for online provisioning where the device would provision itself
#      to the OTA platform (Torizon Cloud).
# - TORIZON_SOTA_PROV_CREDENTIALS: this should point to the location of the
#   credentials file (normally obtained from the platform); if this variable is
#   not set, it will take the value of SOTA_PACKED_CREDENTIALS (when set).
#
# As an alternative to setting TORIZON_SOTA_PROV_CREDENTIALS, one could instead
# set the following two variables:
#
# - TORIZON_PROV_SHARED_DATA: path to shared data tarball.
# - TORIZON_PROV_ONLINE_DATA: string containing the online provisioning data
#   which is generally deemed sensitive information; this is only needed in the
#   "online" provisioning case.
#
# Both pieces of information can be obtained with TorizonCore Builder; see:
# https://developer.toradex.com/torizon/torizoncore/production-programming-in-torizon/#getting-provisioning-data
#
# The advantage of this alternative method is that it does not require a
# credentials file during the build process which can be considered more
# secure. This could be particularly useful in CI. The recommended approach for
# setting TORIZON_PROV_ONLINE_DATA is taking its value from the OS environment
# as done in the second example below with variable ONLINE_PROV_DATA which is
# assumed to be set; for this to work bitbake must be set up appropriately by
# adding the name of that variable to BB_ENV_PASSTHROUGH_ADDITIONS like so:
#
# $ export BB_ENV_PASSTHROUGH_ADDITIONS="ONLINE_PROV_DATA"
# $ bitbake torizon-core-docker
#
# Example (regular usage):
#TORIZON_SOTA_PROV_MODE = "online"
#TORIZON_SOTA_PROV_CREDENTIALS = "/home/someuser/credentials.zip"
#
# Example (without a credentials file); ONLINE_PROV_DATA is supposed to contain
# the online provisioning data (sensitive information):
#TORIZON_SOTA_PROV_MODE = "online"
#TORIZON_PROV_SHARED_DATA ?= "${WORKDIR}/prov/shared-data.tar.gz"
#TORIZON_PROV_ONLINE_DATA ?= "${ONLINE_PROV_DATA}"

ACCEPT_FSL_EULA="1"

include conf/machine/include/${MACHINE}.inc

IMAGE_INSTALL:append = " chrony chronyc nano gpsd lsof"
